name: Process input data on the Backend (div)

on:
  push:
    branches:
      - main
    paths:
      - 'gift0/cb1.txt'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency: 
      group: "webapp"
      cancel-in-progress: false

jobs:
  backend_process_file:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      
    steps:
      - name: Get repository files
        uses: actions/checkout@v4

      - name: Remove old output files
        run: |
          if [ -f gift0/output_response.txt ]; then
            rm gift0/output_response.txt;
          fi;
          
      - name: Obtain input text and model response
        run: |
          INPUT_TEXT="$(cat gift0/cb1.txt | cut -d '|' -f 1)"; 
          echo "INPUT_TEXT = $INPUT_TEXT"; 
          REPO_NAME="$(cat gift0/cb1.txt | cut -d '|' -f 2)"
          # ---------------------------------------
          # Put text input in JSON format with backslash notation (jq -c mean compact JSON format)
          json_string_var="$(echo '{"contents":[{"parts":[{"text":"'$INPUT_TEXT'"}]}]}' | jq -c)"
          echo "json_string_var = $json_string_var";
          # ---------------------------------------
          # Obtain model response in JSON
          model_response=$(curl -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${{ secrets.API_KEY }}" -H "Content-Type:application/json" -d "$json_string_var");
          echo "model_response = $model_response";
          # ---------------------------------------
          # Extract text from JSON response
          model_response_text=$(echo $model_response | jq ".candidates[0].content.parts[0].text");
          echo "model_response_text = $model_response_text";
          # ---------------------------------------
          # Save model output to GitHub environmental variables
          echo "MODEL_RESPONSE_TEXT=$(echo $model_response | jq '.candidates[0].content.parts[0].text')" >> "$GITHUB_ENV";
          # ---------------------------------------
          # Save model output to file
          echo "$model_response_text" >> gift0/output_response.txt;

      - name: Commit and push changes
        run: |
          repoOwner=$(echo "${{ github.repository }}" | cut -d '/' -f 1);
          repoOwnerEmail="j622amilah@gmail.com";
          
          git config --global user.email ${repoOwnerEmail};
          git config --global user.name ${repoOwner};
          git pull origin main;
          git checkout main;
          git branch --set-upstream-to origin/main;
          git merge main --ff-only;
          git add -A; 
          git diff-index --quiet HEAD || git commit -m "add files" --allow-empty;
          git push;
          
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: npm install puppeteer; 

      - name: Load webpage using a non-graphical browser
        uses: actions/github-script@v6
        env:
          MODEL_RESPONSE_TEXT: '${{ env.MODEL_RESPONSE_TEXT }}'
        with:
          result-encoding: string
          script: |
            const puppeteer = require('puppeteer');
            try {

              // Import model_response
              console.log('MODEL_RESPONSE_TEXT in Node.js: ', process.env.MODEL_RESPONSE_TEXT)
              
              const URL = "https://codesolutions2.github.io/quote_to_chatbot_gifts/gift0/index6.html#";
              const browser = await puppeteer.launch({devtools: true, headless: true});
              const page = await browser.newPage();
              
              page.on('load', () => { console.log('Page loaded successfully'); });

              await page.goto(URL);

              // Print text at a specific location
              await page.evaluate(() => { document.querySelector('#response').textContent = 'Text from yaml file'; });

              // On the frontend, we check that the existance of the file_download_url, if it exists the display of response is set to visible to make the backend process stop.
              await page.waitForSelector('#response', {visible: true, timeout: 50000});
              
              await browser.close();
              
            } catch (error) {
              console.log('error: ', error);
            }


  clean_up_files:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      
    steps:
      - name: Wait for 120 seconds (2 mins)
        run: sleep 120

      - name: Re-pull the repository files
        uses: actions/checkout@v4

      - name: Remove files
        run: |
          if [ -f gift0/output_response.txt ]; then
            rm gift0/output_response.txt;
          fi;
          if [ -f gift0/cb1.txt ]; then
            rm gift0/cb1.txt
          fi;
         
      - name: Commit and push changes
        run: |
          repoOwner=$(echo "${{ github.repository }}" | cut -d '/' -f 1);
          repoOwnerEmail="j622amilah@gmail.com";
          
          git config --global user.email ${repoOwnerEmail};
          git config --global user.name ${repoOwner};
          git pull origin main;
          git checkout main;
          git branch --set-upstream-to origin/main;
          git merge main --ff-only;
          git add -A; 
          git diff-index --quiet HEAD || git commit -m "add files" --allow-empty;
          git push;
